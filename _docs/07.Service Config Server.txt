Spring Cloud Config Server


==============================
<1> Spring Cloud Dependency

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-config-server</artifactId>
</dependency>






==============================
<2> Config Server Annotation

@SpringBootApplication
@EnableConfigServer
public class ServiceConfigServer {
	public static void main(String[] args) {
		SpringApplication.run(ServiceConfigServer.class, args);
	}
}




==============================
<3> Configuration
0. profile

   native, git


1. Tomcat Server

server:
   port: 6666


2. file-system based(native)

spring:
  profiles:
    active: native
  cloud:
     config:
       server:
           native:
              searchLocations: file:///Users/jiyoon/IdeaProjects/poscodx2024/STS-Workspace/msa-practices-config-repo/service-emaillist


3. git based

spring:
   cloud:
      config:
         server:
            encrypt.enabled: true
            git:
               uri: https://github.com/Jiyoongrace/msa-practices-config-repo
               searchPaths: service-emaillist


4. Encrypt(암호화)

1. keystore 생성

$ keytool -genkeypair -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 10000


2. classpath에 keystore 파일(keystore.jks) 등록

src/main/resources
  |  
  |- keystore.jks
  |
	

3. Configuration(application.yml) 다음 섹션 추가

encrypt:
  key-store:
    alias: {alias}
    location: classpath:keystore.jks
    password: {storepass}


4. 값 암호화 하기

curl {service-config-server}/encrypt -d "webdb"

AQC3QkSYiQPShNYRPR7Yqg8DbGvEo2jC+VEf8XL1naBtSvw4YyC5n7JPCaKgqQMgZE9ksm59myUAt5WWtWYENqkQH+J3LjiHurLQXTmOGML58f+Tq6Q=

curl http://localhost:7777/encrypt -d "webdb"
AQBVLBaxB/8hfXr+ByYUwyvbSUVbhrxwleH42c0jXRfUosrdVO1oEo2oFypygqBPe8whZml0jVGFkV9/ExO/NoXEQLkGvoKto1nOYh3F/0kqODGxzjDYzKKu0wlrFfZpo7QeR4DPWQwTfGv9hjQMZvs3hJW5S8E773ITd2+VykLBiZQg7HhHDYCwQprLCdvkfTHz/QQDs953sWWt68IZEEihv9tEJ5+FUzvXaIh23+MnwEfT4IV1LnEwzSn64a819EIMRFKRvTuBMSOmPOiD/O/uTd4g9MU34lM+UeVBfZiVRtAKKA5/F1LfcTfwQ/e0EvluQqpItkYU1xofVzBH3DeWw4oVBF8jvbFawsSR+dNUffCHqcjmUdcWjJ4F3N2wsco=%

AQBAnD1oSM7oa2uSjaUIDDSkVDQd9Xc8r3mi7IgwY8IY7uJ+iYxXZ2a0fHquw/aF2mK3F1FEdV2PMGkiqaGa5RNBx8YRIRISakxNBOrM6BtVtbjwawbM88tW2o4yEsfvyqGMtg1arEnIrZoxYI6O5biDXCK3+KB/3CoklLrtYCttY0kHcqDcOfcNubPXSRD/ClxgKoJ78xXHwrmRmliCIvwSSXQ1T1AFrT8OTmY88IfXY9goGktMIi+7nam/3cZgm6c6VxWIm9BSQTtP13X8KRPoh0pG0MDK/y7v6nxTpDTmDTW5b+A2uwT187O2URlLt0rDEXkfJxN6br916eIhsLx1zeo2nBSiR6V6Ip1ujx/pBncsaHtwkDlq9JF7VRrY/1k=

5. 설정에 추가
   datasource:
      driver-class-name: org.mariadb.jdbc.Driver
      url: jdbc:mysql://{DBServer}/webdb?characterEncoding=utf8
      username: webdb
      password: '{cipher}AQC3QkSYiQPShNYRPR7Yqg8DbGvEo2jC+VEf8XL1naBtSvw4YyC5n7JPCaKgqQMgZE9ksm59myUAt5WWtWYENqkQH+J3LjiHurLQXTmOGML58f+Tq6Q='   

6. 확인: service Configuration Endpoints

1) service-emaillist
   - default
     http://{service-config-server}/service-emaillist/default

   - development
     http://{service-config-server}/service-emaillist/development	

   - production
     http://{service-config-server}/service-emaillist/production


2) service-guestbook
   - default
     http://{service-config-server}/service-guestbook/default
	
   - development
     http://{service-config-server}/service-guestbook/development	

   - production
     http://{service-config-server}/service-guestbook/production


3) service-gallery
   - default
     http://{service-config-server}/service-gallery/default
	
   - development
     http://{service-config-server}/service-gallery/development	

   - production
     http://{service-config-server}/service-gallery/production


4) service-storage
   - default
     http://{service-config-server}/service-storage/default
	
   - development
     http://{service-config-server}/service-storage/development	

   - production
     http://{service-config-server}/service-storage/production

5) service-gateway-server
   - default
     http://{service-config-server}/service-gateway-server/default

   - development
     http://{service-config-server}/service-gateway-server/development

   - production
     http://{service-config-server}/service-gateway-server/production






==============================
<4> Config Clients


1. Spring Cloud Dependency

<!-- Spring Cloud Config Client -->
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-config</artifactId>
</dependency>



2. application.yml

---
# configuration: common(default)
spring:
   cloud:
      config:
         enabled: true
         uri: http://localhost:7777


---
# configuration: development
spring:
   config:
      activate:
         on-profile: development
      import: optional:configserver:http://localhost:7777
    
                            
---
# configuration: production
spring:
   config:
      activate:
         on-profile: production
      import: optional:configserver:http://192.168.64.7:7777







	